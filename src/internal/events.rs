use bitcoin::secp256k1::PublicKey;
use lightning::ln::types::ChannelId;
use bitcoin::hash_types::{Txid};
use bitcoin::script::ScriptBuf;

/// An event generated by ChannelManager which indicates a message should be sent to a peer (or
/// broadcast to most peers).
/// These events are handled by PeerManager::process_events if you are using a PeerManager.
#[derive(Clone, Debug)]
#[cfg_attr(test, derive(PartialEq))]
pub enum MessageSendEvent {
  /// Used to indicate that we've initiated a channel open and should send the open_channel
  /// message provided to the given peer.
  SendOpenChannel {
    /// The node_id of the node which should receive this message
    node_id: PublicKey,
    /// The message which should be sent.
    msg: OpenChannel,
  },
  /// Used to indicate that a funding_created message should be sent to the peer with the given node_id.
  SendFundingCreated {
    /// The node_id of the node which should receive this message
    node_id: PublicKey,
    /// The message which should be sent.
    msg: FundingCreated,
  },
}


#[derive(Clone, Debug)]
#[cfg_attr(test, derive(PartialEq))]
pub enum Message {
  OpenChannel,
  NodeAnnouncement,
  OnionMessage
}

pub enum Event {
  /// Used to indicate that the client should generate a funding transaction with the given
  /// parameters and then call [`ChannelManager::funding_transaction_generated`].
  /// Generated in [`ChannelManager`] message handling.
  /// Note that *all inputs* in the funding transaction must spend SegWit outputs or your
  /// counterparty can steal your funds!
  ///
  /// # Failure Behavior and Persistence
  /// This event will eventually be replayed after failures-to-handle (i.e., the event handler
  /// returning `Err(ReplayEvent ())`), but won't be persisted across restarts.
  ///
  /// [`ChannelManager`]: crate::ln::channelmanager::ChannelManager
  /// [`ChannelManager::funding_transaction_generated`]: crate::ln::channelmanager::ChannelManager::funding_transaction_generated
  FundingGenerationReady {
    /// The random channel_id we picked which you'll need to pass into
    /// [`ChannelManager::funding_transaction_generated`].
    ///
    /// [`ChannelManager::funding_transaction_generated`]: crate::ln::channelmanager::ChannelManager::funding_transaction_generated
    temporary_channel_id: u32,
    /// The counterparty's node_id, which you'll need to pass back into
    /// [`ChannelManager::funding_transaction_generated`].
    ///
    /// [`ChannelManager::funding_transaction_generated`]: crate::ln::channelmanager::ChannelManager::funding_transaction_generated
    counterparty_node_id: PublicKey,
    /// The value, in satoshis, that the output should have.
    channel_value_satoshis: u64,
    /// The script which should be used in the transaction output.
    output_script: ScriptBuf,
  },
}

